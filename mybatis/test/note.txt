mybatis  sql语句参数处理逻辑


-----------------------------------1
单个参数 mybatis 不会做特殊处理
#{参数名||任意名} 取出参数
-----------------------------------2
POJO Bean
如果Bean的属性正好对应SQL的多个参数的属性名字 ，就可以直接传入Bean
#{属性名}： 取出传入的Bean的属性值
-----------------------------------3
Map：可以使用map
#{key} 取出map中的对应的值
-----------------------------------4
多个参数mybatis会做特殊处理，多个参数会被封装成一个map
key：param1..paramN,或者参数的所有也可以 1..N
value 传入的参数值
#{}就是从map中获取制定的key的值
select * from tbl_employee where gender=#{0} and email=#{1}
select * from tbl_employee where gender=#{param1} and email=#{param2}
getEmployeeByGenderAndEmail(@Param("gender")String gender,@Param("mail")String mail);

========================思考================================	
public Employee getEmp(@Param("id")Integer id,String lastName);
	取值：id==>#{id/param1}   lastName==>#{param2}

public Employee getEmp(Integer id,@Param("e")Employee emp);
	取值：id==>#{param1}    lastName===>#{param2.lastName/e.lastName}
	
特别注意 如果是Collection，list set 类型或者数组 会被特殊处理
就是把相应的类型封装在map 中
例如 ：#{list[0]}
=============================================================================
#{}  与  ${} 区别在与 
#{} 以预编译的方式 将参数设置在sql语句中
${} 取出的值直接拼装在SQL 中 存在安全问题
如项目中有分表 或者order by 字段 要使用 ${}
表名 字段名 不支持占位符


#{} 更丰富的用法
javaType jdbcType mode numericScale
resultMap typeHandler jdbcTypeName expression

jdbcType 处理Oracle 为 null的情况
insert into employee(id,name,email) values(#{id},#{name},#{email jdbcType=NULL})
如果不指定 jdbcType=NULL oracle会报错 指定了 当email为null 插入的也是null
mabatis对于所有为null的情况 jdbcType都是为other 而oracle不认识other
<setting name="jdbcTypeForNull" value="NULL"/> 全局配置
#{email,jdbcType=NULL};  局部配置


#############################################
自定义resultMap 实现高级结果集映射 当Bean的属性名 与 数据库的表的字段名 不对应时
Bean 无论何时携带个默认参数是最好的
association  用于定义关联单个对象
collection   用于定义关联集合对象

Oracle 不支持 values (xx,xx),(xx,xx)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
mybatis缓存
一级缓存(本地缓存 sqlSession级别的缓存 是一直开启的)
与数据库同一次会话期间查询到的数据会放在本地缓存中
以后获取相同的数据 直接从缓存中拿，不会查询数据库

导致一级缓存失效的四种情况
1. sqlSession 不同
2. sqlSession 相同 但是查询条件不同
3. sqlSession 相同 但是二次查询中间 有修改操作
4. 手工清空的缓存
二级缓存(全局缓存 基于namespace级别的缓存 一个namespace对应一个二级缓存)
工作机制
1. 一个回话 查询一次数据，结果会被保存在当前回话的一级缓存中
2. 如果回话关闭  一级缓存中的数据会被保存到二级缓存中 新的回话查询信息，就可以参照二级缓存中的内容
    查询的数据都会缓存在一级缓存中 只有一级缓存关闭 才会缓存到二级缓存中
3. sqlSession -> EmployeeMapper -> employee
              -> DepartmentMapper -> department 
              不同namespace下保存各自的缓存数据

每个select标签 都有userCache选项 表示是否禁用二级缓存
每个增删改标签 都有flushCache选项 默认为true
openSession.clearCache() 清空一级缓存

localCacheScope 设置为STATEMENT 将会没有一级缓存 

====整合第三方缓存
1.引入第三方缓存jar
2.引入与第三方缓存适配的jar
3.mapper.xml 中使用<cache> 标签引入缓存



































	
	
	