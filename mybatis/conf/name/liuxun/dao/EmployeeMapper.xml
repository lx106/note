<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="name.liuxun.dao.EmployeeMapper">
    <!-- 开启namespace下的二级缓存  --> 
     <!--  <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache> -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
	<!--eviction 缓存的清空策略
         eviction:缓存的回收策略：
		• LRU – 最近最少使用的：移除最长时间不被使用的对象。
		• FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
		• SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
		• WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
		• 默认的是 LRU。
		
		flushInterval 缓存刷新间隔  缓存多少时间清空一次
		readOnly 意思是 是否缓存为只读   mybatis为了加快获取速度 直接将数据在缓存中的引用交给用户 速度快 不过不安全
		                设置为false  mybatis会利用序列化&反序列化 clone一份新的数据  默认为false  安全 速度慢
                 因此我们的pojo需要实现序列化接口
        size 缓存中保存多少个元素
        type 指定自定义的缓存全类名 实现 cache 接口  -->
	<select id="getEmployeeById" resultType="emp" databaseId="mysql" >
		select * from tbl_employee where id = #{xxx}
	</select>
	<select id="getEmployeeByIdAndName" resultType="emp" databaseId="mysql" >
		select * from tbl_employee where id = #{id} and last_name=#{lastName}
	</select>
	
	<insert id="addEmp" parameterType="name.liuxun.bean.Employee" useGeneratedKeys="true" keyProperty="id">
	   insert into tbl_employee(last_name,gender,email) values(#{lastName},#{gender},#{email})
	</insert>
	
	<insert id="addEmp" parameterType="name.liuxun.bean.Employee" databaseId="oracle">
	   <selectKey keyProperty="id" order="BEFORE" resultType="Integer" >
	     select employee.nextval from dual
	   </selectKey>
	   insert into tbl_employee(id,last_name,gender,email) values(#{id},#{lastName},#{gender},#{email})
	</insert>
	
	<update id="updateEmp">
	   update tbl_employee set last_name=#{lastName},gender=#{gender},email=#{email} where id =#{id}
	</update>
	
	<delete id="deleteEmpById">
	 delete from tbl_employee where id = #{id}
	</delete>
	
	<select id="getEmployeeByBean" resultType="name.liuxun.bean.Employee">
	   select * from tbl_employee where gender=#{gender} and last_name=#{lastName}
	</select>
	
	<select id="getEmployeeByMap" resultType="name.liuxun.bean.Employee">
	   select * from ${table_name} where id=#{id} and last_name=#{last_name}
	</select>
	
	<select id="getEmployeeByGenderAndEmail" resultType="name.liuxun.bean.Employee">
	  select * from tbl_employee where gender=#{gender} and email=#{email}
	</select>
	
	<select id="getEmployeeByList" resultType="name.liuxun.bean.Employee">
	  select * from tbl_employee where id=#{list[0]}
	</select>
	
	<!-- public List<Employee> getEmpsByLastNameLike(String lastName); -->
	<!-- 返回list集合 是 resultType类型 应该为 list中的类型 -->
	<select id="getEmpsByLastNameLike" resultType="name.liuxun.bean.Employee">
	  select * from tbl_employee where last_name like #{lastName}
	</select>
	
	<!--public HashMap<String,Object> getMap(Integer id);  -->
	<!-- 返回一条记录 key是列名 value是指  -->
	<select id="getMap" resultType="hashmap">
	  select * from tbl_employee where id = #{id}
	</select>
	<!--public HashMap<Integer,Employee> getMaps(String lastName);  -->
	<select id="getMaps" resultType="name.liuxun.bean.Employee">
	  select * from tbl_employee where last_name like #{lastName}
	</select>
	
	<select id="testFirstLevelCache" resultType="name.liuxun.bean.Employee">
	 select * from tbl_employee where id = #{id}
	</select>
	
</mapper>
